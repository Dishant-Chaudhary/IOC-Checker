import requests
import yaml
import os

def load_config():
    """Load config.yaml from the parent directory."""
    base_dir = os.path.dirname(os.path.dirname(__file__))
    config_path = os.path.join(base_dir, "config.yaml")
    with open(config_path, "r") as file:
        return yaml.safe_load(file)

def query_malwarebazaar(hashes):
    """Query MalwareBazaar for a list of hashes (MD5/SHA1/SHA256)."""
    config = load_config()
    api_key = config.get("malwarebazaar", {}).get("api_key")
    base_url = config.get("malwarebazaar", {}).get("base_url", "https://mb-api.abuse.ch/api/v1/")

    if not api_key:
        print("API key not found in config.yaml under 'malwarebazaar.api_key'")
        return

    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "API-KEY": api_key
    }

    for hash_value in hashes:
        data = {
            "query": "get_info",
            "hash": hash_value
        }

        try:
            response = requests.post(base_url, headers=headers, data=data)
            response.raise_for_status()
            result = response.json()

            if result.get("query_status") == "hash_not_found":
                print(f"[!] Hash not found: {hash_value}")
                continue

            if result.get("query_status") != "ok":
                print(f"[!] Unexpected response: {result.get('query_status')}")
                continue

            print(f"\n[+] Results for Hash: {hash_value}")
            for entry in result.get("data", []):
                print(f"  MD5 Hash       : {entry.get('md5_hash')}")
                print(f"  SHA1 Hash      : {entry.get('sha1_hash')}")
                print(f"  SHA256 Hash    : {entry.get('sha256_hash')}")
                print(f"  File Name      : {entry.get('file_name')}")
                print(f"  File Type      : {entry.get('file_type')}")
                print(f"  MIME Type      : {entry.get('file_type_mime')}")
                print(f"  File Size      : {entry.get('file_size')} bytes")
                print(f"  First Seen     : {entry.get('first_seen')}")
                print(f"  Tags           : {entry.get('tags')}")
                print("-" * 40)

        except Exception as e:
            print(f"[ERROR] MalwareBazaar request failed for {hash_value}: {e}")
